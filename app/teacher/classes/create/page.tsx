"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { toast } from "sonner";

import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";

import { ArrowLeft, Save, Plus } from "lucide-react";

export default function CreateClassPage() {
  const router = useRouter();

  const [form, setForm] = useState({
    name: "",
    subject: "",
    grade: "",
    teacher: "",
    capacity: "",
    schedule: "",
    room: "",
    startDate: "",
    endDate: "",
    description: "",
    allowComments: true,
    autoAttendance: false,
    notifyReminder: true,
  });

  const handleSubmit = (mode: "draft" | "create") => {
    console.log("Class data:", { ...form, mode });

    // üëâ TODO: g·ªçi API backend ƒë·ªÉ l∆∞u l·ªõp h·ªçc
    // await fetch("/api/classes", { method: "POST", body: JSON.stringify({ ...form, mode }) })

    toast.success(
      mode === "draft" ? "L·ªõp h·ªçc ƒë√£ ƒë∆∞·ª£c l∆∞u nh√°p!" : "T·∫°o l·ªõp h·ªçc th√†nh c√¥ng!"
    );

    router.push("/teacher/classes");
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold">T·∫°o l·ªõp h·ªçc m·ªõi</h1>
          <p className="text-gray-600 text-sm">
            Nh·∫≠p th√¥ng tin chi ti·∫øt ƒë·ªÉ t·∫°o m·ªôt l·ªõp h·ªçc trong h·ªá th·ªëng
          </p>
        </div>
        <Button variant="outline" onClick={() => router.push("/teacher/classes")}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Quay l·∫°i
        </Button>
      </div>

      {/* Form */}
      <Card className="max-w-7xl mx-auto">
        <CardHeader>
          <CardTitle>Th√¥ng tin l·ªõp h·ªçc</CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* T√™n l·ªõp h·ªçc */}
          <div className="space-y-2">
            <Label>T√™n l·ªõp h·ªçc</Label>
            <Input
              value={form.name}
              onChange={(e) => setForm({ ...form, name: e.target.value })}
              placeholder="Nh·∫≠p t√™n l·ªõp h·ªçc (VD: To√°n h·ªçc l·ªõp 3A)"
              className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm"
            />
          </div>

          {/* M√¥n h·ªçc + Kh·ªëi l·ªõp */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>M√¥n h·ªçc</Label>
              <Select
                value={form.subject}
                onValueChange={(v) => setForm({ ...form, subject: v })}
              >
                <SelectTrigger className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm">
                  <SelectValue placeholder="Ch·ªçn m√¥n h·ªçc" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="math">To√°n h·ªçc</SelectItem>
                  <SelectItem value="english">Ti·∫øng Anh</SelectItem>
                  <SelectItem value="science">Khoa h·ªçc</SelectItem>
                  <SelectItem value="history">L·ªãch s·ª≠</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label>Kh·ªëi/L·ªõp</Label>
              <Select
                value={form.grade}
                onValueChange={(v) => setForm({ ...form, grade: v })}
              >
                <SelectTrigger className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm">
                  <SelectValue placeholder="Ch·ªçn kh·ªëi/l·ªõp" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="1">L·ªõp 1</SelectItem>
                  <SelectItem value="2">L·ªõp 2</SelectItem>
                  <SelectItem value="3">L·ªõp 3</SelectItem>
                  <SelectItem value="4">L·ªõp 4</SelectItem>
                  <SelectItem value="5">L·ªõp 5</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Gi√°o vi√™n + S·ªë l∆∞·ª£ng */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>Gi√°o vi√™n ph·ª• tr√°ch</Label>
              <Input
                value={form.teacher}
                onChange={(e) => setForm({ ...form, teacher: e.target.value })}
                placeholder="Nh·∫≠p t√™n gi√°o vi√™n ph·ª• tr√°ch"
                className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm"
              />
            </div>
            <div className="space-y-2">
              <Label>S·ªë l∆∞·ª£ng h·ªçc sinh t·ªëi ƒëa</Label>
              <Input
                type="number"
                value={form.capacity}
                onChange={(e) => setForm({ ...form, capacity: e.target.value })}
                placeholder="VD: 30"
                className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm"
              />
            </div>
          </div>

          {/* L·ªãch h·ªçc + Ph√≤ng h·ªçc */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>L·ªãch h·ªçc</Label>
              <Input
                value={form.schedule}
                onChange={(e) => setForm({ ...form, schedule: e.target.value })}
                placeholder="VD: Th·ª© 2, 4, 6 - 8:00-9:30"
                className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm"
              />
            </div>
            <div className="space-y-2">
              <Label>Ph√≤ng h·ªçc / Link h·ªçc online</Label>
              <Input
                value={form.room}
                onChange={(e) => setForm({ ...form, room: e.target.value })}
                placeholder="VD: Ph√≤ng A101 ho·∫∑c Zoom link"
                className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm"
              />
            </div>
          </div>

          {/* Ng√†y b·∫Øt ƒë·∫ßu - k·∫øt th√∫c */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label>Ng√†y b·∫Øt ƒë·∫ßu</Label>
              <Input
                type="date"
                value={form.startDate}
                onChange={(e) => setForm({ ...form, startDate: e.target.value })}
                className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm"
              />
            </div>
            <div className="space-y-2">
              <Label>Ng√†y k·∫øt th√∫c</Label>
              <Input
                type="date"
                value={form.endDate}
                onChange={(e) => setForm({ ...form, endDate: e.target.value })}
                className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm"
              />
            </div>
          </div>

          {/* M√¥ t·∫£ */}
          <div className="space-y-2">
            <Label>M√¥ t·∫£ chi ti·∫øt</Label>
            <Textarea
              rows={5}
              value={form.description}
              onChange={(e) => setForm({ ...form, description: e.target.value })}
              placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ l·ªõp h·ªçc..."
              className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm"
            />
          </div>

          {/* T√πy ch·ªçn n√¢ng cao */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="flex items-center justify-between border rounded-md p-3">
              <Label>Cho ph√©p h·ªçc vi√™n b√¨nh lu·∫≠n</Label>
              <Switch
                checked={form.allowComments}
                onCheckedChange={(v) => setForm({ ...form, allowComments: v })}
              />
            </div>
            <div className="flex items-center justify-between border rounded-md p-3">
              <Label>ƒêi·ªÉm danh t·ª± ƒë·ªông</Label>
              <Switch
                checked={form.autoAttendance}
                onCheckedChange={(v) => setForm({ ...form, autoAttendance: v })}
              />
            </div>
            <div className="flex items-center justify-between border rounded-md p-3">
              <Label>G·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü</Label>
              <Switch
                checked={form.notifyReminder}
                onCheckedChange={(v) => setForm({ ...form, notifyReminder: v })}
              />
            </div>
          </div>
        </CardContent>

        <CardFooter className="flex justify-end gap-2">
          <Button variant="outline" onClick={() => handleSubmit("draft")}>
            <Save className="h-4 w-4 mr-2" />
            L∆∞u nh√°p
          </Button>
          <Button onClick={() => handleSubmit("create")}>
            <Plus className="h-4 w-4 mr-2" />
            T·∫°o l·ªõp h·ªçc
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}
