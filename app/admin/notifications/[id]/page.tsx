"use client";

import { useState } from "react";
import { useParams, useRouter } from "next/navigation";
import {
  Card,
  CardHeader,
  CardTitle,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { ArrowLeft, Edit, Save, Send } from "lucide-react";
import { toast } from "sonner"; // üëà import sonner

// ====================== FAKE DATA ======================
const fakeNotification = {
  id: 1,
  title: "B·∫£o tr√¨ h·ªá th·ªëng",
  content: "H·ªá th·ªëng s·∫Ω b·∫£o tr√¨ v√†o ng√†y 20/09/2025.",
  type: "system",
  target: "all",
  status: "nh√°p", // "nh√°p" | "h·∫πn gi·ªù" | "ƒë√£ g·ª≠i"
  isScheduled: false,
  scheduleDate: "",
  createdBy: "Admin",
  createdAt: "2025-09-15",
  sentAt: "-",
  recipients: 1000,
  read: 300,
};

export default function NotificationDetailPage() {
  const { id } = useParams();
  const router = useRouter();

  const [editMode, setEditMode] = useState(false);
  const [form, setForm] = useState(fakeNotification);

  const handleSave = () => {
    try {
      console.log("C·∫≠p nh·∫≠t:", form);
      // üëâ TODO: g·ªçi API c·∫≠p nh·∫≠t
      toast.success("Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t");
      setEditMode(false);
    } catch (error) {
      console.log(error);
      toast.error("C√≥ l·ªói khi c·∫≠p nh·∫≠t th√¥ng b√°o");
    }
  };

  const handleSend = () => {
    try {
      console.log("G·ª≠i th√¥ng b√°o:", form);
      // üëâ TODO: g·ªçi API g·ª≠i th√¥ng b√°o
      toast.success("Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c g·ª≠i");
      router.push("/admin/notifications");
    } catch (err) {
      console.log(err);
      
      toast.error("Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o");
    }
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold">Chi ti·∫øt th√¥ng b√°o #{id}</h1>
          <p className="text-gray-600 text-sm">
            {editMode
              ? "Ch·ªânh s·ª≠a n·ªôi dung v√† c√†i ƒë·∫∑t th√¥ng b√°o"
              : "Xem th√¥ng tin chi ti·∫øt th√¥ng b√°o"}
          </p>
        </div>
        <Button
          variant="outline"
          onClick={() => router.push("/admin/notifications")}
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Quay l·∫°i
        </Button>
      </div>

      <Card className="max-w-7xl mx-auto">
        <CardHeader>
          <CardTitle>
            {editMode ? "Ch·ªânh s·ª≠a th√¥ng b√°o" : "Th√¥ng tin th√¥ng b√°o"}
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Ti√™u ƒë·ªÅ */}
          <div className="space-y-2">
            <label className="text-sm font-medium">Ti√™u ƒë·ªÅ</label>
            <Input
              disabled={!editMode}
              value={form.title}
              onChange={(e) => setForm({ ...form, title: e.target.value })}
              className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm"
            />
          </div>

          {/* N·ªôi dung */}
          <div className="space-y-2">
            <label className="text-sm font-medium">N·ªôi dung</label>
            <Textarea
              disabled={!editMode}
              rows={5}
              value={form.content}
              onChange={(e) => setForm({ ...form, content: e.target.value })}
              className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm"
            />
          </div>

          {/* Lo·∫°i th√¥ng b√°o */}
          <div className="space-y-2">
            <label className="text-sm font-medium">Lo·∫°i th√¥ng b√°o</label>
            <Select
              disabled={!editMode}
              value={form.type}
              onValueChange={(v) => setForm({ ...form, type: v })}
            >
              <SelectTrigger className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="system">H·ªá th·ªëng</SelectItem>
                <SelectItem value="learning">H·ªçc t·∫≠p</SelectItem>
                <SelectItem value="commerce">Th∆∞∆°ng m·∫°i</SelectItem>
                <SelectItem value="warning">C·∫£nh b√°o</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* ƒê·ªëi t∆∞·ª£ng nh·∫≠n */}
          <div className="space-y-2">
            <label className="text-sm font-medium">ƒê·ªëi t∆∞·ª£ng nh·∫≠n</label>
            <Select
              disabled={!editMode}
              value={form.target}
              onValueChange={(v) => setForm({ ...form, target: v })}
            >
              <SelectTrigger className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">T·∫•t c·∫£ ng∆∞·ªùi d√πng</SelectItem>
                <SelectItem value="teachers">Gi√°o vi√™n</SelectItem>
                <SelectItem value="students">H·ªçc sinh</SelectItem>
                <SelectItem value="class">Theo l·ªõp c·ª• th·ªÉ</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* H·∫πn gi·ªù g·ª≠i */}
          <div className="flex items-center justify-between border rounded-md p-3">
            <div>
              <label className="text-sm font-medium">H·∫πn gi·ªù g·ª≠i</label>
              <p className="text-xs text-gray-500">
                N·∫øu b·∫≠t, b·∫°n c√≥ th·ªÉ ch·ªçn ng√†y gi·ªù g·ª≠i thay v√¨ g·ª≠i ngay
              </p>
            </div>
            <Switch
              disabled={!editMode}
              checked={form.isScheduled}
              onCheckedChange={(v) => setForm({ ...form, isScheduled: v })}
            />
          </div>
          {form.isScheduled && (
            <div className="space-y-2">
              <label className="text-sm font-medium">Ng√†y gi·ªù g·ª≠i</label>
              <Input
                disabled={!editMode}
                type="datetime-local"
                value={form.scheduleDate}
                onChange={(e) =>
                  setForm({ ...form, scheduleDate: e.target.value })
                }
                className="bg-white border border-gray-300 text-gray-900 rounded-md shadow-sm"
              />
            </div>
          )}

          {/* Th·ªëng k√™ */}
          {!editMode && (
            <div className="grid grid-cols-2 gap-4 text-sm text-gray-700">
              <div>
                <span className="font-medium">Ng∆∞·ªùi t·∫°o:</span> {form.createdBy}
              </div>
              <div>
                <span className="font-medium">Ng√†y t·∫°o:</span> {form.createdAt}
              </div>
              <div>
                <span className="font-medium">Ng√†y g·ª≠i:</span> {form.sentAt}
              </div>
              <div>
                <span className="font-medium">ƒê√£ ƒë·ªçc:</span>{" "}
                {form.read}/{form.recipients}
              </div>
            </div>
          )}
        </CardContent>

        <CardFooter className="flex justify-end gap-2">
          {!editMode && form.status !== "ƒë√£ g·ª≠i" ? (
            <Button variant="outline" onClick={() => setEditMode(true)}>
              <Edit className="h-4 w-4 mr-2" />
              Ch·ªânh s·ª≠a
            </Button>
          ) : null}

          {editMode ? (
            <div className="flex gap-2">
              <Button variant="outline" onClick={() => setEditMode(false)}>
                H·ªßy
              </Button>
              <Button onClick={handleSave}>
                <Save className="h-4 w-4 mr-2" />
                L∆∞u thay ƒë·ªïi
              </Button>
            </div>
          ) : form.status !== "ƒë√£ g·ª≠i" ? (
            <Button onClick={handleSend}>
              <Send className="h-4 w-4 mr-2" />
              G·ª≠i th√¥ng b√°o
            </Button>
          ) : null}
        </CardFooter>
      </Card>
    </div>
  );
}
